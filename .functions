# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$@";
}

# Change working directory to the top-most Finder window location
function cdf() {
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";
	echo "${tmpFile}.gz created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* *;
	fi;
}

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Start an HTTP server from a directory, optionally specifying the port
function servh() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function servp() {
	local port="${1:-4000}";
	sleep 1 && open "http://localhost:${port}/" &
	php -S "$localhost:${port}";
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript;
	else # pipe
		python -mjson.tool | pygmentize -l javascript;
	fi;
}

# `a` with no arguments opens the current directory in Atom Editor, otherwise
# opens the given location
function a() {
	if [ $# -eq 0 ]; then
		atom .;
	else
		atom "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Transfer.sh (https://transfer.sh)
function transfer() {
    tmpfile=$( mktemp -t transferXXX )
    basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9]/-/g')
    curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> $tmpfile;
    cat $tmpfile;
    rm -f $tmpfile;
}

# Quicker update for everything
function update() {
  npm install npm -g
  npm update -g
  apm upgrade -c false
  brew update
  brew upgrade
  brew cleanup
  pip install --upgrade pip
  gem update
  gem update --system
}

# Convert lossless to lossy
function _audio() {
  case $1 in
    --mp3|*) local CODEC=libmp3lame;local FILENAME=mp3;;
    --aac) local CODEC=ffmpeg -c:a aac;local FILENAME=aac;;
    --help) echo "Usage: _audio --codec --bitrate \n Default: _audio --mp3 --256" && exit 0;;
  esac
  case $2 in
    256|*) local BITRATE=256k;;
    320) local BITRATE=320k;;
  esac

  for FILE in *.flac; do
    ffmpeg -i "$FILE" -c:a $CODEC -b:a $BITRATE "`basename "$FILE" .flac`.$FILENAME" || break;
  done
}

# Given an argument installs new node version, also migrating packages
function nvmi() {
  NOW=$(node -v)
  nvm install $1 --reinstall-packages-from=$NOW

  nvm alias default $1
  nvm uninstall $NOW
}

# Install latest node version
function nvmi_latest() {
  NOW=$(node -v)
  LATEST=$(nvm ls-remote | tail -1 | grep -E -o '.{0,0}v.{0,6}' | tr -d '\n')

  nvm install $LATEST --reinstall-packages-from=$NOW

  nvm alias default $LATEST
  nvm uninstall $NOW
}

# Update to latest nvm
function _update_nvm() {
  wget -qO- https://raw.githubusercontent.com/creationix/nvm/$1/install.sh | bash
}

function sr() {
  spotify-ripper $1 && terminal-notifier \
     -title 'Task completed' -message 'A terminal task completed/failed' \
     -group 'sr' -remove 'sr' -activate co.zeit.hyperterm \
     -appIcon /Applications/HyperTerm.app/Contents/Resources/electron.icns
}

# cat/ccat than auto copy
function _c() {
  if which ccat > /dev/null; then
    ccat $1 | pbcopy
  else
    cat $1 | pbcopy
  fi;
}

# Clean temp files etc
function superclean() {
  rm $HOME/.spotify-ripper/Storage
  rm /var/vm/sleepimage
}

function add_alias() {
  echo "alias $1=\"$2\"" >> .aliases
}
